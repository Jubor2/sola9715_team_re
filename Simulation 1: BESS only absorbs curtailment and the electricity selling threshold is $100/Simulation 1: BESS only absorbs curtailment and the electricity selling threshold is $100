import pandas as pd
import numpy as np

# === Reading & preprocessing ===
df = pd.read_csv("NSW_CURTAILMENT_2024.csv")
df["ts"] = pd.to_datetime(df["SETTLEMENTDATE"])
df = df.sort_values("ts")
Δt = 5 / 60                                      # hours per market step (5-min)
df["curtail_MW"] = df["SS_SOLAR_CURTAILMENT"] + df["SS_WIND_CURTAILMENT"]
total_curt_MWh = df["curtail_MW"].sum() * Δt     # annual curtailed energy

# === Battery-dispatch function ===
def simulate_battery(power_MW, duration_h,
                     charge_eff=0.92, discharge_eff=0.932,
                     price_threshold=100):
    E_max = power_MW * duration_h               # usable storage (MWh)
    soc = curt_absorb = revenue = charge_cost = 0.0
    Δt_local = Δt                               # avoid closure-reference warning

    for _, row in df.iterrows():
        price = 0.0 if pd.isna(row["RRP($/MWh)"]) else row["RRP($/MWh)"]
        curtail = row["curtail_MW"] * Δt_local  # MWh curtailed in this step

        # ----- Charging -----
        avail_c = min(power_MW * Δt_local, E_max - soc)  # power constraint
        charge  = min(avail_c, curtail)                  # only use curtailed energy
        soc     += charge * charge_eff
        curt_absorb += charge
        charge_cost += (charge / charge_eff) * price     # cost of charging

        # ----- Discharging -----
        if price >= price_threshold and soc > 0:
            avail_d = min(power_MW * Δt_local, soc)
            soc -= avail_d
            revenue += avail_d * discharge_eff * price

    return {
        "Absorbed_MWh": curt_absorb,
        "Curtailment_Reduction_%": curt_absorb / total_curt_MWh * 100,
        "Gross_Revenue_$": revenue,
        "Charge_Cost_$": charge_cost,
        "Net_Profit_$": revenue - charge_cost,
    }

# === Scenario list ===
scenarios = [
    # 4-hour storage
    (100, 4), (500, 4), (1500, 4), (2500, 4),
    (3500, 4), (4500, 4), (5500, 4), (6500, 4),
    # 2-hour storage
    (200, 2), (1000, 2), (3000, 2), (5000, 2),
    (7000, 2), (9000, 2), (11000, 2), (13000, 2),
    # 8-hour storage
    (50, 8), (250, 8), (750, 8), (1250, 8),
    (1750, 8), (2250, 8), (2750, 8), (3250, 8),
]

# === Run & aggregate ===
rows = []
for P, H in scenarios:
    out = simulate_battery(P, H)
    rows.append({
        "Power_MW": P,
        "Duration_h": H,
        "Energy_MWh": P * H,
        **out,                                   # unpack result dict
    })

print(pd.DataFrame(rows).round(2))
